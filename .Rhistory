}
return(set)
}
EuropeanPutsimul <- function(n,S,K,u,r,v) {
if(u <= 1) {
stop()
}
d = 1/u
count=(n+1)*(n+2)/2
stock<-c(rep.int(0,count))
Put<-c(rep.int(0,count))
Delta<-c(rep.int(0,count))
set<-c(rep.int(1,v))
pu = (1+r-d)/(u-d)
pd = 1-pu
stock[1] = S
x=2
for(i in 1:n) {
for(j in 0:i) {
stock[x]=S*(u^(i-j))*(d^j)
x=x+1
}
}
for(i in (count-n):count) {
if(K > stock[i]) {
Put[i] = K-stock[i]
}
}
z=(count-n-1)
for(m in n:1) {
for(j in 0:(m-1)) {
Put[z] = ((pu*Put[z+m])+(pd*Put[z+m+1]))/(1+r)
Delta[z] = (Put[z+m]-Put[z+m+1])/(stock[z]*(u-d))
z = z-1
}
}
for(a in 1:v) {
i <- 1
for(t in 1:n) {
if(runif(1)>0.5) {
set[a] = (1+r)*(set[a]+Delta[i]*((stock[i+t]/(1+r))-stock[i]))
i=i+t
} else {
set[a] = (1+r)*(set[a]+Delta[i]*((stock[i+t+1]/(1+r))-stock[i]))
i=i+t+1
}
}
}
return(set)
}
test1<-EuropeanCallsimul(5,100,95,1.25,0.05,8)
test1
test1<-EuropeanCallsimul(5,100,95,1.25,0.05,1000)
plot(test1)
histogram(test1)
hist(test1)
summary(test1)
x = as.data.frame(test1)
x
library(plyr)
x = count(test1)
x
count(test1)
floor(test1)
count(floor(test1))
x = count(floor(ttest1))
x = count(floor(test1))
x
x[1]
x[[1]
x[[1]]
x[1][1]
x$freq[1]
x$freq[1]/1000
print(paste("Simulated Probability is ", count(floor(test1))$freq[1] / 1000)
print(paste("Simulated Probability is ", count(floor(test1))$freq[1]/1000))
prob = count(floor(test1))$freq[1]/1000)
prob = count(floor(test1))$freq[1]/1000
print(paste("Simulated Probability is ", prob)
print(paste("Simulated Probability is ", prob))
print(paste("Simulated Probability is ", prob*100))
print(paste("Simulated Probability is ", prob*100, "%"))
rm(list=ls())
EuropeanCallsimul <- function(n,S,K,u,r,v) {
sigma=0.25
h = 1/n
r = 0.1*h
u = 1+r+sigma*sqrt(h)
d = 1+r-sigma*sqrt(h)
count=(n+1)*(n+2)/2
stock<-c(rep.int(0,count))
Delta<-c(rep.int(0,count))
Call<-c(rep.int(0,count))
set<-c(rep.int(1,v))
pu = (1+r-d)/(u-d)
pd = 1-pu
stock[1] = S
x=2
for(i in 1:n) {
for(j in 0:i) {
stock[x]=S*(u^(i-j))*(d^j)
x=x+1
}
}
for(i in (count-n):count) {
if(K < stock[i]) {
Call[i] = stock[i]-K
}
}
z=(count-n-1)
for(j in 0:(m-1)) {
for(m in n:1) {
Call[z] = ((pu*Call[z+m])+(pd*Call[z+m+1]))/(1+r)
Delta[z] = (Call[z+m]-Call[z+m+1])/(stock[z]*(u-d))
z = z-1
}
}
for(a in 1:v) {
i <- 1
for(t in 1:n) {
if(runif(1)>0.5) {
set[a] = (1+r)*(set[a]+Delta[i]*((stock[i+t]/(1+r))-stock[i]))
i=i+t
} else {
set[a] = (1+r)*(set[a]+Delta[i]*((stock[i+t+1]/(1+r))-stock[i]))
i=i+t+1
}
}
}
return(set)
}
EuropeanPutsimul <- function(n,S,K,u,r,v) {
if(u <= 1) {
stop()
}
d = 1/u
count=(n+1)*(n+2)/2
stock<-c(rep.int(0,count))
Put<-c(rep.int(0,count))
Delta<-c(rep.int(0,count))
set<-c(rep.int(1,v))
pu = (1+r-d)/(u-d)
pd = 1-pu
stock[1] = S
x=2
for(i in 1:n) {
for(j in 0:i) {
stock[x]=S*(u^(i-j))*(d^j)
x=x+1
}
}
for(i in (count-n):count) {
if(K > stock[i]) {
Put[i] = K-stock[i]
}
}
z=(count-n-1)
for(m in n:1) {
for(j in 0:(m-1)) {
Put[z] = ((pu*Put[z+m])+(pd*Put[z+m+1]))/(1+r)
Delta[z] = (Put[z+m]-Put[z+m+1])/(stock[z]*(u-d))
z = z-1
}
}
for(a in 1:v) {
i <- 1
for(t in 1:n) {
if(runif(1)>0.5) {
set[a] = (1+r)*(set[a]+Delta[i]*((stock[i+t]/(1+r))-stock[i]))
i=i+t
} else {
set[a] = (1+r)*(set[a]+Delta[i]*((stock[i+t+1]/(1+r))-stock[i]))
i=i+t+1
}
}
}
return(set)
}
test1<-EuropeanCallsimul(5,100,95,1.25,0.05,10000)
test2<-EuropeanPutsimul(5,100,95,1.25,0.05,10000)
test1<-EuropeanCallsimul(5,100,95,1.25,0.05,10000)
test1<-EuropeanCallsimul(5,100,95,1.25,0.05,1000)
test1<-EuropeanCallsimul(5,100,95,1.25,0.05,8)
rm(list=ls())
EuropeanCall <- function(n,S,K,u,r) {
if(u <= 1) {
stop()
}
d = 1/u
count=(n+1)*(n+2)/2
stock<-c(rep.int(0,count))
Call<-c(rep.int(0,count))
Delta<-c(rep.int(0,count))
pu = (1+r-d)/(u-d)
pd = 1-pu
stock[1] = S
x=2
for(i in 1:n) {
for(j in 0:i) {
stock[x]=S*(u^(i-j))*(d^j)
x=x+1
}
}
for(i in (count-n):count) {
if(K < stock[i]) {
Call[i] = stock[i]-K
}
}
z=(count-n-1)
for(m in n:1) {
for(j in 0:(m-1)) {
Call[z] = ((pu*Call[z+m])+(pd*Call[z+m+1]))/(1+r)
Delta[z] = (Call[z+m]-Call[z+m+1])/(stock[z]*(u-d))
z = z-1
}
}
return(data.frame(S=stock, Calls=Call, Deltas=Delta))
}
EuropeanPut <- function(n,S,K,u,r) {
if(u <= 1) {
stop()
}
d = 1/u
count=(n+1)*(n+2)/2
stock<-c(rep.int(0,count))
Put<-c(rep.int(0,count))
Delta<-c(rep.int(0,count))
pu = (1+r-d)/(u-d)
pd = 1-pu
stock[1] = S
x=2
for(i in 1:n) {
for(j in 0:i) {
stock[x]=S*(u^(i-j))*(d^j)
x=x+1
}
}
for(i in (count-n):count) {
if(K > stock[i]) {
Put[i] = K-stock[i]
}
}
z=(count-n-1)
for(m in n:1) {
for(j in 0:(m-1)) {
Put[z] = ((pu*Put[z+m])+(pd*Put[z+m+1]))/(1+r)
Delta[z] = (Put[z+m]-Put[z+m+1])/(stock[z]*(u-d))
z = z-1
}
}
return(data.frame(S=stock, Puts=Put, Deltas=Delta))
test1<-EuropeanCall(5,100,95,1.25,0.05) #test1$Calls[1] is the premium
}
test2<-EuropeanPut(5,100,95,1.25,0.05)
#2c
rm(list=ls())
EuropeanCallsimul <- function(n,S,K,u,r,v) {
test1<-EuropeanCall(5,100,95,1.25,0.05) #test1$Calls[1] is the premium
EuropeanCall <- function(n,S,K,u,r) {
if(u <= 1) {
stop()
}
d = 1/u
count=(n+1)*(n+2)/2
stock<-c(rep.int(0,count))
Call<-c(rep.int(0,count))
Delta<-c(rep.int(0,count))
pu = (1+r-d)/(u-d)
pd = 1-pu
stock[1] = S
x=2
for(i in 1:n) {
for(j in 0:i) {
stock[x]=S*(u^(i-j))*(d^j)
x=x+1
}
}
for(i in (count-n):count) {
if(K < stock[i]) {
Call[i] = stock[i]-K
}
}
z=(count-n-1)
for(m in n:1) {
for(j in 0:(m-1)) {
Call[z] = ((pu*Call[z+m])+(pd*Call[z+m+1]))/(1+r)
Delta[z] = (Call[z+m]-Call[z+m+1])/(stock[z]*(u-d))
z = z-1
}
}
return(data.frame(S=stock, Calls=Call, Deltas=Delta))
}
EuropeanPut <- function(n,S,K,u,r) {
if(u <= 1) {
stop()
}
d = 1/u
count=(n+1)*(n+2)/2
stock<-c(rep.int(0,count))
Put<-c(rep.int(0,count))
Delta<-c(rep.int(0,count))
pu = (1+r-d)/(u-d)
pd = 1-pu
stock[1] = S
x=2
for(i in 1:n) {
for(j in 0:i) {
stock[x]=S*(u^(i-j))*(d^j)
x=x+1
}
}
for(i in (count-n):count) {
if(K > stock[i]) {
Put[i] = K-stock[i]
}
}
z=(count-n-1)
for(m in n:1) {
for(j in 0:(m-1)) {
Put[z] = ((pu*Put[z+m])+(pd*Put[z+m+1]))/(1+r)
Delta[z] = (Put[z+m]-Put[z+m+1])/(stock[z]*(u-d))
z = z-1
}
}
return(data.frame(S=stock, Puts=Put, Deltas=Delta))
}
test1<-EuropeanCall(5,100,95,1.25,0.05) #test1$Calls[1] is the premium
test2<-EuropeanPut(5,100,95,1.25,0.05)
#2c
rm(list=ls())
EuropeanCallsimul <- function(n,S,K,u,r,v) {
sigma=0.25
h = 1/n
r = 0.1*h
u = 1+r+sigma*sqrt(h)
d = 1+r-sigma*sqrt(h)
count=(n+1)*(n+2)/2
stock<-c(rep.int(0,count))
Call<-c(rep.int(0,count))
Delta<-c(rep.int(0,count))
set<-c(rep.int(1,v))
pu = (1+r-d)/(u-d)
pd = 1-pu
stock[1] = S
x=2
for(i in 1:n) {
for(j in 0:i) {
stock[x]=S*(u^(i-j))*(d^j)
x=x+1
}
}
for(i in (count-n):count) {
if(K < stock[i]) {
Call[i] = stock[i]-K
}
}
z=(count-n-1)
for(m in n:1) {
for(j in 0:(m-1)) {
Call[z] = ((pu*Call[z+m])+(pd*Call[z+m+1]))/(1+r)
Delta[z] = (Call[z+m]-Call[z+m+1])/(stock[z]*(u-d))
z = z-1
}
}
for(a in 1:v) {
i <- 1
for(t in 1:n) {
if(runif(1)>0.5) {
set[a] = (1+r)*(set[a]+Delta[i]*((stock[i+t]/(1+r))-stock[i]))
i=i+t
} else {
set[a] = (1+r)*(set[a]+Delta[i]*((stock[i+t+1]/(1+r))-stock[i]))
i=i+t+1
}
}
}
return(set)
}
EuropeanPutsimul <- function(n,S,K,u,r,v) {
if(u <= 1) {
stop()
}
d = 1/u
count=(n+1)*(n+2)/2
stock<-c(rep.int(0,count))
Put<-c(rep.int(0,count))
Delta<-c(rep.int(0,count))
set<-c(rep.int(1,v))
pu = (1+r-d)/(u-d)
pd = 1-pu
stock[1] = S
x=2
for(i in 1:n) {
for(j in 0:i) {
stock[x]=S*(u^(i-j))*(d^j)
x=x+1
}
}
for(i in (count-n):count) {
if(K > stock[i]) {
Put[i] = K-stock[i]
}
}
z=(count-n-1)
for(m in n:1) {
for(j in 0:(m-1)) {
Put[z] = ((pu*Put[z+m])+(pd*Put[z+m+1]))/(1+r)
Delta[z] = (Put[z+m]-Put[z+m+1])/(stock[z]*(u-d))
z = z-1
}
}
for(a in 1:v) {
i <- 1
for(t in 1:n) {
if(runif(1)>0.5) {
set[a] = (1+r)*(set[a]+Delta[i]*((stock[i+t]/(1+r))-stock[i]))
i=i+t
} else {
set[a] = (1+r)*(set[a]+Delta[i]*((stock[i+t+1]/(1+r))-stock[i]))
i=i+t+1
}
}
}
return(set)
}
test1<-EuropeanCallsimul(5,100,95,1.25,0.05,10000)
library(plyr)
prob = count(floor(test1))$freq[1]/1000
print(paste("Simulated Probability that the payoff is -$18.15", prob*100, "%"))
prob = count(floor(test1))$freq[1]/10000
print(paste("Simulated Probability that the payoff is -$18.15", prob*100, "%"))
plot.new()
plot(ylab="Scaled Random Walk",
xlab="Time")
E = 30
r = 0.05
delta = 0
sigma = .3
T-t = 1
Tt = 1
library(readr)
library(randomForest)
library(caret)
library(ggplot2)
library(dplyr)
library(stringr)
library(corrplot)
set.seed(231)
#Navigating through directory
setwd("/Users/fi/Documents/Kaggle/Predicting-Crimes-in-Philadelphia") # Set own path
setwd("/Users/fi/Documents/GitHub/Predicting-Crimes-in-Philadelphia") # Set own path
#Importing data in two different ways
train <- read.csv("crime.csv", stringsAsFactors=FALSE)
head(train)
nrow(train)
ncol(train)
M <- cor(train[sapply(train, function(x) !is.character(x))])
corrplot(M, method = "number", order = "hclust",type='lower', diag=F, addCoefasPercent=T, )
train2[complete.cases(train),]
train = train[complete.cases(train),]
train2 = train[complete.cases(train),]
nrow(train2)
M <- cor(train2[sapply(train, function(x) !is.character(x))])
corrplot(M, method = "number", order = "hclust",type='lower', diag=F, addCoefasPercent=T, )
train$Psa
corrplot(M, method = "circle", order = "hclust",type='lower', diag=F, addCoefasPercent=T, )
number
corrplot(M, method = "number", order = "hclust",type='lower', diag=F, addCoefasPercent=T, )
corr(train2$Dc_Dist, train2$UCR_General)
cor(train2$Dc_Dist, train2$UCR_General)
cor(train2$Lon, train2$Dc_Dist)
head(train)
ggplot(train,aes(x = Psa)) + geom_histogram()
ggplot(train,aes(x = Psa)) + geom_bar()
unique(train$Psa)
length(unique(train$Psa))
library(readr)
library(randomForest)
library(caret)
library(ggplot2)
library(dplyr)
library(stringr)
library(corrplot)
set.seed(231)
#Navigating through directory
setwd("/Users/fi/Documents/GitHub/Predicting-Crimes-in-Philadelphia") # Set own path
#Importing data in two different ways
train <- read.csv("crime.csv", stringsAsFactors=FALSE)
#Previewing data
head(train)
train3 = filter(train, Psa != 1 | Psa != 2 | Psa != 3 | Psa != 4)
ggplot(train3,aes(x = Psa)) + geom_bar()
unique(train3$Psa)
length(unique(train3$Psa))
train3 = filter(train, Psa <> 1 | Psa <> 2 | Psa <> 3 | Psa <> 4)
train3 = filter(train, Psa != 1
)
length(unique(train3$Psa))
train3 = filter(train, Psa != 1 & Psa != 2 & Psa != 3 & Psa != 4)
ggplot(train3,aes(x = Psa)) + geom_bar()
ggplot(train,aes(x = Hour)) + geom_bar()
unique(train$Hour)
length(unique(train$Hour))
ggplot(train,aes(x = Hour)) + geom_line()
ggplot(train,aes(x = Hour)) + geom_bar()
M <- cor(train[sapply(train2, function(x) !is.character(x))])
corrplot(M, method = "circle", order = "hclust",type='lower', diag=F, addCoefasPercent=T, )
train2 = train[complete.cases(train),]
M <- cor(train[sapply(train2, function(x) !is.character(x))])
corrplot(M, method = "circle", order = "hclust",type='lower', diag=F, addCoefasPercent=T, )
M <- cor(train2[sapply(train, function(x) !is.character(x))])
corrplot(M, method = "number", order = "hclust",type='lower', diag=F, addCoefasPercent=T, )
